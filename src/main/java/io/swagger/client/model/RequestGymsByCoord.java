/**
 * WellNet API gate for mobile apps
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class RequestGymsByCoord {
  
  @SerializedName("limit")
  private Integer limit = null;
  @SerializedName("offset")
  private Integer offset = null;
  @SerializedName("latitude")
  private BigDecimal latitude = null;
  @SerializedName("longitude")
  private BigDecimal longitude = null;
  @SerializedName("type")
  private BigDecimal type = null;
  @SerializedName("radius")
  private Integer radius = null;
  @SerializedName("metadata")
  private Boolean metadata = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getLimit() {
    return limit;
  }
  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getOffset() {
    return offset;
  }
  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getLatitude() {
    return latitude;
  }
  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getLongitude() {
    return longitude;
  }
  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public BigDecimal getType() {
    return type;
  }
  public void setType(BigDecimal type) {
    this.type = type;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getRadius() {
    return radius;
  }
  public void setRadius(Integer radius) {
    this.radius = radius;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Boolean getMetadata() {
    return metadata;
  }
  public void setMetadata(Boolean metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestGymsByCoord requestGymsByCoord = (RequestGymsByCoord) o;
    return (this.limit == null ? requestGymsByCoord.limit == null : this.limit.equals(requestGymsByCoord.limit)) &&
        (this.offset == null ? requestGymsByCoord.offset == null : this.offset.equals(requestGymsByCoord.offset)) &&
        (this.latitude == null ? requestGymsByCoord.latitude == null : this.latitude.equals(requestGymsByCoord.latitude)) &&
        (this.longitude == null ? requestGymsByCoord.longitude == null : this.longitude.equals(requestGymsByCoord.longitude)) &&
        (this.type == null ? requestGymsByCoord.type == null : this.type.equals(requestGymsByCoord.type)) &&
        (this.radius == null ? requestGymsByCoord.radius == null : this.radius.equals(requestGymsByCoord.radius)) &&
        (this.metadata == null ? requestGymsByCoord.metadata == null : this.metadata.equals(requestGymsByCoord.metadata));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.limit == null ? 0: this.limit.hashCode());
    result = 31 * result + (this.offset == null ? 0: this.offset.hashCode());
    result = 31 * result + (this.latitude == null ? 0: this.latitude.hashCode());
    result = 31 * result + (this.longitude == null ? 0: this.longitude.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.radius == null ? 0: this.radius.hashCode());
    result = 31 * result + (this.metadata == null ? 0: this.metadata.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestGymsByCoord {\n");
    
    sb.append("  limit: ").append(limit).append("\n");
    sb.append("  offset: ").append(offset).append("\n");
    sb.append("  latitude: ").append(latitude).append("\n");
    sb.append("  longitude: ").append(longitude).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  radius: ").append(radius).append("\n");
    sb.append("  metadata: ").append(metadata).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
